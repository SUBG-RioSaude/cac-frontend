# Micro-Auth API - Sistema de Autentica√ß√£o e Autoriza√ß√£o

## üìã Vis√£o Geral

A **Micro-Auth API** √© um sistema robusto de autentica√ß√£o e autoriza√ß√£o desenvolvido em **.NET 9** com **Entity Framework Core** e **PostgreSQL**. O sistema implementa autentica√ß√£o de dois fatores (2FA), gerenciamento de sess√µes, controle de acesso baseado em permiss√µes e integra√ß√£o com m√∫ltiplos sistemas.

## üèóÔ∏è Arquitetura

- **Framework**: .NET 9
- **ORM**: Entity Framework Core
- **Banco de Dados**: PostgreSQL
- **Autentica√ß√£o**: JWT (JSON Web Tokens)
- **Criptografia**: AES-256 para dados sens√≠veis, BCrypt para senhas
- **Padr√£o**: REST API com controllers organizados por dom√≠nio

## üîê Seguran√ßa

### Criptografia e Hash
- **Senhas**: Hash com BCrypt (salt autom√°tico)
- **CPF**: Criptografado com AES-256
- **Tokens**: JWT assinado com HMAC-SHA256
- **C√≥digos 2FA**: Hash SHA-256

### Valida√ß√µes
- Valida√ß√£o de CPF com algoritmo oficial
- Valida√ß√£o de telefone (10-11 d√≠gitos)
- Valida√ß√£o de CEP (8 d√≠gitos)
- Valida√ß√£o de data de nascimento (13-90 anos)
- Valida√ß√£o de sexo (M/F/O)

## ‚è∞ Tempos de Expira√ß√£o

| Recurso | Dura√ß√£o | Observa√ß√µes |
|---------|---------|-------------|
| **JWT Token** | 2 horas | Renova√ß√£o autom√°tica via refresh token |
| **Refresh Token** | 31 dias | Para login normal |
| **Refresh Token** | 7 dias | Para renova√ß√£o de token |
| **C√≥digo 2FA** | 10 minutos | C√≥digo de autentica√ß√£o por e-mail |
| **Token Troca Senha** | 10 minutos | Token tempor√°rio para redefini√ß√£o |
| **Senha** | 31 dias | Expira√ß√£o configur√°vel por usu√°rio |

## üöÄ Endpoints da API

### üîë Autentica√ß√£o (`/api/auth`)

#### 1. **POST** `/api/auth/register`
**Cadastro de novo usu√°rio**

**Request Body:**
```json
{
  "nomeCompleto": "string",
  "email": "string",
  "matricula": "string",
  "cpf": "string",
  "telefone": "string",
  "sexo": "string",
  "dataNascimento": "date",
  "vinculo": "string",
  "unidadeId": "guid",
  "funcaoId": "guid",
  "logradouro": "string",
  "numero": "string",
  "complemento": "string",
  "bairro": "string",
  "cidade": "string",
  "estado": "string",
  "cep": "string",
  "senhaExpiraEm": "date"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "usuarioId": "guid",
    "senhaProvisoria": "string"
  },
  "mensagem": "Usu√°rio cadastrado com sucesso. Senha provis√≥ria enviada por e-mail."
}
```

**Regras de Neg√≥cio:**
- Gera senha provis√≥ria forte automaticamente
- Envia credenciais por e-mail com template personalizado
- Valida exist√™ncia de unidade e fun√ß√£o
- Criptografa CPF antes do armazenamento
- Define `PrecisaTrocarSenha = true` por padr√£o

#### 2. **POST** `/api/auth/login`
**In√≠cio do processo de login**

**Request Body:**
```json
{
  "email": "string",
  "senha": "string",
  "sistemaId": "guid (opcional)"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "mensagem": "C√≥digo de autentica√ß√£o enviado para o e-mail.",
    "sistema": {
      "id": "guid",
      "nome": "string",
      "descricao": "string"
    },
    "permissao": "string"
  }
}
```

**Regras de Neg√≥cio:**
- Valida credenciais e status do usu√°rio
- Verifica acesso ao sistema (se especificado)
- Valida perfil completo do usu√°rio
- Gera e envia c√≥digo 2FA por e-mail
- Verifica expira√ß√£o de senha

#### 3. **POST** `/api/auth/confirmar-codigo-2fa`
**Confirma√ß√£o do c√≥digo 2FA**

**Request Body:**
```json
{
  "email": "string",
  "codigo": "string"
}
```

**Response (Sucesso):**
```json
{
  "sucesso": true,
  "dados": {
    "token": "string",
    "refreshToken": "string",
    "usuario": {
      "id": "guid",
      "email": "string",
      "nomeCompleto": "string",
      "tipoUsuario": "string",
      "precisaTrocarSenha": false
    }
  }
}
```

**Response (Troca de Senha Obrigat√≥ria):**
```json
{
  "precisaTrocarSenha": true,
  "message": "Troca de senha obrigat√≥ria. Informe a nova senha para prosseguir.",
  "tokenTrocaSenha": "string"
}
```

**Regras de Neg√≥cio:**
- Valida c√≥digo 2FA com expira√ß√£o de 10 minutos
- Confirma e-mail automaticamente se necess√°rio
- Retorna tokens JWT e refresh token
- Se senha expirada, retorna token tempor√°rio para troca

#### 4. **POST** `/api/auth/trocar-senha`
**Troca de senha do usu√°rio**

**Request Body:**
```json
{
  "email": "string",
  "novaSenha": "string",
  "tokenTrocaSenha": "string (opcional)"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "token": "string",
    "refreshToken": "string",
    "usuario": {
      "id": "guid",
      "email": "string",
      "nomeCompleto": "string",
      "tipoUsuario": "string",
      "precisaTrocarSenha": false
    }
  },
  "mensagem": "Senha alterada com sucesso. Voc√™ j√° pode acessar o sistema."
}
```

**Regras de Neg√≥cio:**
- Aceita token de troca de senha (sem JWT)
- Nova senha n√£o pode ser igual √† anterior
- Define nova expira√ß√£o de senha (31 dias)
- Remove flag `PrecisaTrocarSenha`

#### 5. **POST** `/api/auth/refresh-token`
**Renova√ß√£o de token JWT**

**Request Body:**
```json
{
  "refreshToken": "string"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "token": "string",
    "refreshToken": "string",
    "expiresIn": 3600,
    "refreshTokenExpiresIn": 604800,
    "usuario": {
      "id": "guid",
      "email": "string",
      "nomeCompleto": "string",
      "tipoUsuario": "string",
      "emailConfirmado": true,
      "ativo": true
    }
  }
}
```

**Regras de Neg√≥cio:**
- Valida refresh token ativo e n√£o expirado
- Verifica confirma√ß√£o 2FA
- Gera novo JWT (2 horas) e refresh token (7 dias)
- Invalida refresh token anterior

#### 6. **POST** `/api/auth/esqueci-senha`
**Solicita√ß√£o de redefini√ß√£o de senha**

**Request Body:**
```json
{
  "email": "string"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": "Se o e-mail informado estiver cadastrado, um c√≥digo de autentica√ß√£o foi enviado para ele.",
  "mensagem": "C√≥digo de autentica√ß√£o enviado."
}
```

**Regras de Neg√≥cio:**
- Sempre retorna mensagem gen√©rica (seguran√ßa)
- Gera c√≥digo 2FA v√°lido por 10 minutos
- Define `PrecisaTrocarSenha = true`
- Envia c√≥digo por e-mail

#### 7. **POST** `/api/auth/logout`
**Logout seguro**

**Request Body:**
```json
{
  "refreshToken": "string"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": "Logout realizado com sucesso.",
  "mensagem": "Logout realizado com sucesso."
}
```

**Regras de Neg√≥cio:**
- Invalida refresh token espec√≠fico
- Sempre retorna sucesso (seguran√ßa)

#### 8. **POST** `/api/auth/logout-all-sessions`
**Logout de todas as sess√µes**

**Request Body:**
```json
{
  "refreshToken": "string"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": "Logout de todas as sess√µes realizado com sucesso.",
  "mensagem": "Logout de todas as sess√µes realizado com sucesso."
}
```

**Regras de Neg√≥cio:**
- Invalida todos os refresh tokens ativos do usu√°rio
- √ötil para dispositivos perdidos/comprometidos

#### 9. **POST** `/api/auth/sessoes-ativas`
**Lista sess√µes ativas do usu√°rio**

**Request Body:**
```json
{
  "refreshToken": "string"
}
```

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "quantidadeSessoes": 3,
    "sessoes": [
      {
        "id": "guid",
        "criadoEm": "datetime",
        "expiracao": "datetime",
        "doisFatoresConfirmado": true,
        "ehSessaoAtual": true
      }
    ]
  }
}
```

### üë• Usu√°rios (`/api/usuarios`)

#### 1. **GET** `/api/usuarios`
**Lista todos os usu√°rios**

**Response:**
```json
[
  {
    "id": "guid",
    "nome": "string",
    "email": "string",
    "matricula": "string",
    "unidade": "string",
    "status": true,
    "emailConfirmado": true
  }
]
```

#### 2. **GET** `/api/usuarios/{id}`
**Obt√©m usu√°rio por ID**

**Response:**
```json
{
  "id": "guid",
  "email": "string",
  "ativo": true,
  "emailConfirmado": true,
  "tipoUsuario": "string",
  "criadoEm": "datetime",
  "atualizadoEm": "datetime",
  "nomeCompleto": "string",
  "matricula": "string",
  "cpf": "string (descriptografado)",
  "telefone": "string",
  "sexo": "char",
  "dataNascimento": "datetime",
  "vinculo": "string",
  "unidadeId": "guid",
  "funcaoId": "guid",
  "enderecoId": "guid",
  "logradouro": "string",
  "numero": "string",
  "complemento": "string",
  "bairro": "string",
  "cidade": "string",
  "estado": "string",
  "cep": "string"
}
```

#### 3. **PUT** `/api/usuarios/{id}`
**Atualiza usu√°rio**

#### 4. **PUT** `/api/usuarios/{id}/ativar`
**Ativa usu√°rio**

#### 5. **PUT** `/api/usuarios/{id}/inativar`
**Inativa usu√°rio**

#### 6. **POST** `/api/usuarios`
**Cria usu√°rio (admin)**

#### 7. **DELETE** `/api/usuarios/{id}`
**Remove usu√°rio**

### üè¢ Unidades (`/api/unidades`)

#### 1. **GET** `/api/unidades`
**Lista todas as unidades**

#### 2. **GET** `/api/unidades/{id}`
**Obt√©m unidade por ID**

#### 3. **POST** `/api/unidades`
**Cria unidade com endere√ßo**

#### 4. **PUT** `/api/unidades/{id}`
**Atualiza unidade**

#### 5. **DELETE** `/api/unidades/{id}`
**Remove unidade**

### üéØ Fun√ß√µes (`/api/funcoes`)

#### 1. **GET** `/api/funcoes`
**Lista todas as fun√ß√µes**

#### 2. **GET** `/api/funcoes/{id}`
**Obt√©m fun√ß√£o por ID**

#### 3. **POST** `/api/funcoes`
**Cria fun√ß√£o**

#### 4. **PUT** `/api/funcoes/{id}`
**Atualiza fun√ß√£o**

#### 5. **DELETE** `/api/funcoes/{id}`
**Remove fun√ß√£o**

### üîê Permiss√µes (`/api/permissoes`)

#### 1. **GET** `/api/permissoes`
**Lista todas as permiss√µes**

#### 2. **GET** `/api/permissoes/{id}`
**Obt√©m permiss√£o por ID**

#### 3. **POST** `/api/permissoes`
**Cria permiss√£o**

#### 4. **PUT** `/api/permissoes/{id}`
**Atualiza permiss√£o**

#### 5. **DELETE** `/api/permissoes/{id}`
**Remove permiss√£o**

### üíª Sistemas (`/api/sistemas`)

#### 1. **GET** `/api/sistemas`
**Lista todos os sistemas**

#### 2. **GET** `/api/sistemas/{id}`
**Obt√©m sistema por ID**

#### 3. **POST** `/api/sistemas`
**Cria sistema**

#### 4. **PUT** `/api/sistemas/{id}`
**Atualiza sistema**

#### 5. **DELETE** `/api/sistemas/{id}`
**Remove sistema**

### üîó Usu√°rio-Permiss√£o-Sistema (`/api/usuariopermissaosistema`)

#### 1. **GET** `/api/usuariopermissaosistema`
**Lista todos os v√≠nculos**

#### 2. **GET** `/api/usuariopermissaosistema/{id}`
**Obt√©m v√≠nculo por ID**

#### 3. **POST** `/api/usuariopermissaosistema`
**Cria v√≠nculo usu√°rio-sistema-permiss√£o**

#### 4. **PUT** `/api/usuariopermissaosistema/{id}`
**Atualiza v√≠nculo**

#### 5. **DELETE** `/api/usuariopermissaosistema/{id}`
**Remove v√≠nculo**

#### 6. **GET** `/api/usuariopermissaosistema/verificar-acesso/{sistemaId}`
**Verifica acesso do usu√°rio a um sistema**

**Headers:** `Authorization: Bearer {jwt_token}`

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "temAcesso": true,
    "permissao": "string",
    "permissaoId": "guid",
    "sistema": {
      "id": "guid",
      "nome": "string",
      "descricao": "string"
    },
    "dataVinculo": "datetime",
    "mensagem": "string"
  }
}
```

#### 7. **GET** `/api/usuariopermissaosistema/meus-sistemas`
**Lista sistemas e permiss√µes do usu√°rio logado**

**Headers:** `Authorization: Bearer {jwt_token}`

**Response:**
```json
{
  "sucesso": true,
  "dados": {
    "totalSistemas": 3,
    "sistemas": [
      {
        "sistema": {
          "id": "guid",
          "nome": "string",
          "descricao": "string"
        },
        "permissao": {
          "id": "guid",
          "nome": "string",
          "descricao": "string"
        },
        "dataVinculo": "datetime"
      }
    ]
  }
}
```

## üìß Servi√ßo de E-mail

### Configura√ß√£o SMTP
```json
{
  "Smtp": {
    "Host": "smtp.gmail.com",
    "Port": 587,
    "Username": "sgm.smsrio@gmail.com",
    "Password": "ixqq uspj rmiz eiep"
  }
}
```

### Templates Dispon√≠veis
- **Acesso Criado**: Credenciais para novos usu√°rios
- **C√≥digo de Autentica√ß√£o**: 2FA para login
- **Redefini√ß√£o de Senha**: C√≥digo para troca de senha

### Anexos Inline
- Logo da Prefeitura do Rio
- Logo da Gest√£o

## üóÑÔ∏è Modelos de Dados

### Usuario
- ID, Email, SenhaHash, Ativo, EmailConfirmado
- TentativasLogin, BloqueadoAte, UltimoLogin
- TipoUsuario, CriadoEm, AtualizadoEm, DeletedAt
- PrecisaTrocarSenha, SenhaExpiraEm

### UsuarioInfo
- UsuarioId, NomeCompleto, Matricula, Cpf (criptografado)
- Telefone, Sexo, DataNascimento, Vinculo
- UnidadeId, FuncaoId, EnderecoId, AtualizadoEm

### Endereco
- ID, Logradouro, Numero, Complemento, Bairro
- Cidade, Estado, Cep, AtualizadoEm

### Unidade
- ID, Nome, Cap, EnderecoId, AtualizadoEm

### Funcao
- ID, Nome, AtualizadoEm

### Permissao
- ID, Nome, Descricao, AtualizadoEm

### Sistema
- ID, Nome, Descricao, AtualizadoEm

### UsuarioPermissaoSistema
- ID, UsuarioId, SistemaId, PermissaoId
- AtribuidoEm, AtualizadoEm

### RefreshToken
- ID, UsuarioId, Token, Expiracao
- CriadoEm, Utilizado, DoisFatoresConfirmado

### CodigoAutenticacao
- ID, UsuarioId, Codigo (hash), Expiracao
- Utilizado, CriadoEm

## üîí Regras de Seguran√ßa

### Valida√ß√µes de Entrada
- **CPF**: Algoritmo oficial de valida√ß√£o
- **Telefone**: 10-11 d√≠gitos num√©ricos
- **CEP**: 8 d√≠gitos num√©ricos
- **Data Nascimento**: Entre 13 e 90 anos
- **Sexo**: M, F, O (MASCULINO, FEMININO, OUTRO)

### Controle de Acesso
- Verifica√ß√£o de permiss√£o por sistema
- Valida√ß√£o de perfil completo
- Controle de sess√µes ativas
- Logout seguro com invalida√ß√£o de tokens

### Prote√ß√£o de Dados
- Senhas nunca armazenadas em texto plano
- CPF criptografado com AES-256
- Tokens JWT com expira√ß√£o controlada
- Refresh tokens com rota√ß√£o autom√°tica

## üö¶ Status Codes

- **200**: Sucesso
- **201**: Criado
- **400**: Dados inv√°lidos
- **401**: N√£o autorizado
- **403**: Proibido
- **404**: N√£o encontrado
- **409**: Conflito
- **500**: Erro interno

## üîß Configura√ß√£o

### Vari√°veis de Ambiente
```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=10.1.72.166;Port=5432;Database=usuarios;Username=SUBG-HOM;Password=$ubg@2@25"
  },
  "Jwt": {
    "Key": "chave-secreta-256-bits",
    "Issuer": "your_issuer",
    "Audience": "your_audience"
  },
  "Crypto": {
    "Key": "A1b2C3d4E5f6G7h8",
    "IV": "Z9y8X7w6V5u4T3s2"
  }
}
```

### CORS
```csharp
options.AddPolicy("FrontendPolicy", policy =>
{
    policy.WithOrigins("http://localhost:3000", "http://localhost:5173", "http://localhost:3001")
          .AllowAnyHeader()
          .AllowAnyMethod()
          .AllowCredentials();
});
```

## üì± Frontend Compat√≠vel

- **React Vite** com TypeScript
- **React Router DOM** para navega√ß√£o
- **TailwindCSS** para estiliza√ß√£o
- **Shadcn/UI** para componentes
- **Portas**: 3000, 3001, 5173

## üöÄ Deploy e Execu√ß√£o

### Pr√©-requisitos
- .NET 9 SDK
- PostgreSQL
- SMTP configurado

### Execu√ß√£o
```bash
cd Micro-Auth
dotnet restore
dotnet build
dotnet run
```

### Swagger
- **URL**: `/swagger` (apenas em desenvolvimento)
- **Documenta√ß√£o**: Autom√°tica da API

## üîç Endpoints de Debug (Remover em Produ√ß√£o)

- `POST /api/auth/debug-token`
- `GET /api/auth/listar-tokens-ativos`

## üìù Notas Importantes

1. **Sempre use HTTPS em produ√ß√£o**
2. **Configure chaves JWT seguras**
3. **Monitore tentativas de login**
4. **Implemente rate limiting**
5. **Fa√ßa backup regular do banco**
6. **Mantenha depend√™ncias atualizadas**
7. **Use vari√°veis de ambiente para configura√ß√µes sens√≠veis**

## ü§ù Contribui√ß√£o

Este sistema foi desenvolvido para o ambiente da Prefeitura do Rio de Janeiro, com foco em seguran√ßa e usabilidade. Para contribui√ß√µes ou d√∫vidas, entre em contato com a equipe de desenvolvimento.

---

**Vers√£o**: 1.0.0  
**√öltima Atualiza√ß√£o**: Dezembro 2024  
**Desenvolvido por**: Equipe de Desenvolvimento - Prefeitura do Rio de Janeiro
