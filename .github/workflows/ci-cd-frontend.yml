# üé® CI/CD - Frontend CAC
# Testes, Lint, Build e Push versionado para Docker Hub

name: üé® CI/CD - Frontend CAC

on:
  push:
    branches: [ develop, staging, master ]
  pull_request:
    branches: [ develop, staging, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: cac-frontend

jobs:
  # üß™ QUALIDADE DE C√ìDIGO E TESTES
  quality-check:
    name: üß™ Testes de qualidade & Testes (Node 20 LTS)
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: üîß Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: üì¶ Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Code Quality Check
        run: |
          echo "üîç Running ESLint..."
          pnpm lint
          echo "‚úÖ ESLint passed!"

      - name: üé® Format Check
        run: |
          echo "üé® Checking code formatting..."
          pnpm format:check
          echo "‚úÖ Code formatting is correct!"

      - name: üîß Install System Dependencies
        run: |
          echo "üîß Installing system dependencies..."
          sudo apt-get update -qq
          sudo apt-get install -y bc jq
          echo "‚úÖ System dependencies installed!"

      - name: üèóÔ∏è TypeScript Build Check
        id: build
        run: |
          echo "üèóÔ∏è Checking TypeScript compilation..."

          # Medir tempo de build
          BUILD_START=$(date +%s)
          pnpm build
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))

          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "‚úÖ TypeScript build successful in ${BUILD_TIME}s!"

          # Performance budget check
          if [ $BUILD_TIME -gt 120 ]; then
            echo "::warning::Build time (${BUILD_TIME}s) exceeds 2 minutes"
          fi

      - name: üì¶ Bundle Size Analysis
        id: bundle
        run: |
          echo "üì¶ Analyzing bundle size..."

          if [ -d "dist" ]; then
            # Calcular tamanho do bundle
            BUNDLE_SIZE_HUMAN=$(du -sh dist/ | cut -f1)
            BUNDLE_SIZE_BYTES=$(du -sb dist/ | cut -f1)

            echo "bundle_size=$BUNDLE_SIZE_BYTES" >> $GITHUB_OUTPUT

            echo "## üì¶ Bundle Size Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Size | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Bundle | $BUNDLE_SIZE_HUMAN | $([ $BUNDLE_SIZE_BYTES -le 5242880 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Threshold:** ‚â§ 5MB (5,242,880 bytes)" >> $GITHUB_STEP_SUMMARY

            # Assets breakdown
            if [ -d "dist/assets" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üìÅ Assets Breakdown" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              ls -lah dist/assets/ | head -10 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi

            # Warning for large bundles
            if [ $BUNDLE_SIZE_BYTES -gt 5242880 ]; then
              echo "‚ö†Ô∏è Bundle size ($BUNDLE_SIZE_HUMAN) exceeds 5MB threshold"
              echo "::warning::Bundle size is large. Consider code splitting or optimizations."
            else
              echo "‚úÖ Bundle size within acceptable limits"
            fi
          else
            echo "‚ö†Ô∏è Build directory not found"
            echo "::warning::Could not analyze bundle size - dist directory missing"
          fi

      - name: üß™ Run Tests with Coverage
        id: tests
        run: |
          echo "üß™ Running Vitest tests with coverage..."

          # Medir tempo de testes
          TEST_START=$(date +%s)
          pnpm test --run --reporter=verbose --coverage
          TEST_END=$(date +%s)
          TEST_TIME=$((TEST_END - TEST_START))

          echo "test_time=$TEST_TIME" >> $GITHUB_OUTPUT
          echo "‚úÖ All tests passed in ${TEST_TIME}s!"

          # Performance budget check
          if [ $TEST_TIME -gt 300 ]; then
            echo "::warning::Test time (${TEST_TIME}s) exceeds 5 minutes"
          fi

      - name: üìä Coverage Report
        id: coverage
        run: |
          echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)

            echo "lines=$LINES" >> $GITHUB_OUTPUT
            echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
            echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
            echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT

            echo "| Metric | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% | $([ ${LINES%.*} -ge 85 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% | $([ ${FUNCTIONS%.*} -ge 90 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% | $([ ${BRANCHES%.*} -ge 85 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% | $([ ${STATEMENTS%.*} -ge 90 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Thresholds:** Lines ‚â•85%, Functions ‚â•90%, Branches ‚â•85%, Statements ‚â•90%" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üéØ Coverage Enforcement
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "‚ùå Coverage file not found - enforcement failed"
            exit 1
          fi

          LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
          BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
          STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)

          echo "üéØ Checking coverage thresholds..."
          FAILED=0

          if (( $(echo "$LINES < 85" | bc -l) )); then
            echo "‚ùå Lines coverage ($LINES%) is below threshold (85%)"
            FAILED=1
          fi

          if (( $(echo "$FUNCTIONS < 90" | bc -l) )); then
            echo "‚ùå Functions coverage ($FUNCTIONS%) is below threshold (90%)"
            FAILED=1
          fi

          if (( $(echo "$BRANCHES < 85" | bc -l) )); then
            echo "‚ùå Branches coverage ($BRANCHES%) is below threshold (85%)"
            FAILED=1
          fi

          if (( $(echo "$STATEMENTS < 90" | bc -l) )); then
            echo "‚ùå Statements coverage ($STATEMENTS%) is below threshold (90%)"
            FAILED=1
          fi

          if [ $FAILED -eq 1 ]; then
            exit 1
          fi

          echo "‚úÖ All coverage thresholds met!"

      - name: ‚ö° Performance Report
        run: |
          BUILD_TIME="${{ steps.build.outputs.build_time }}"
          TEST_TIME="${{ steps.tests.outputs.test_time }}"

          echo "## ‚ö° Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Time | Budget | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${BUILD_TIME}s | ‚â§ 120s | $([ $BUILD_TIME -le 120 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${TEST_TIME}s | ‚â§ 300s | $([ $TEST_TIME -le 300 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          TOTAL_TIME=$((BUILD_TIME + TEST_TIME))
          echo "**Total CI Time:** ${TOTAL_TIME}s" >> $GITHUB_STEP_SUMMARY

      - name: üì¶ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 7

      - name: üìä Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage/
          retention-days: 7

  # üìä AN√ÅLISE DE PR - Bundle Size Comparison
  pr-analysis:
    name: üìä PR Analysis
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout PR Branch
        uses: actions/checkout@v4

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: üîß Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: üîß Install System Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y bc jq

      - name: üì¶ Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build PR Branch
        id: pr_build
        run: |
          echo "üèóÔ∏è Building PR branch..."
          pnpm build
          PR_SIZE=$(du -sb dist/ | cut -f1)
          echo "size=$PR_SIZE" >> $GITHUB_OUTPUT
          mv dist dist-pr

      - name: üì• Checkout Base Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: üèóÔ∏è Build Base Branch
        id: base_build
        run: |
          echo "üèóÔ∏è Building base branch..."
          pnpm install --frozen-lockfile
          pnpm build
          BASE_SIZE=$(du -sb dist/ | cut -f1)
          echo "size=$BASE_SIZE" >> $GITHUB_OUTPUT

      - name: üìà Bundle Size Comparison
        run: |
          PR_BUNDLE_SIZE="${{ steps.pr_build.outputs.size }}"
          BASE_BUNDLE_SIZE="${{ steps.base_build.outputs.size }}"

          echo "## üìà Bundle Size Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          PR_SIZE_MB=$(echo "scale=2; $PR_BUNDLE_SIZE / 1048576" | bc)
          BASE_SIZE_MB=$(echo "scale=2; $BASE_BUNDLE_SIZE / 1048576" | bc)
          DIFF_BYTES=$(($PR_BUNDLE_SIZE - $BASE_BUNDLE_SIZE))
          DIFF_MB=$(echo "scale=2; $DIFF_BYTES / 1048576" | bc)

          echo "| Branch | Size (MB) |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Base (${{ github.base_ref }}) | ${BASE_SIZE_MB} MB |" >> $GITHUB_STEP_SUMMARY
          echo "| PR (${{ github.head_ref }}) | ${PR_SIZE_MB} MB |" >> $GITHUB_STEP_SUMMARY
          echo "| **Difference** | **${DIFF_MB} MB** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $DIFF_BYTES -gt 0 ]; then
            echo "üìà Bundle size increased by ${DIFF_MB} MB" >> $GITHUB_STEP_SUMMARY
            if [ $DIFF_BYTES -gt 1048576 ]; then
              echo "::warning::Bundle size increased significantly (+${DIFF_MB} MB)"
            fi
          elif [ $DIFF_BYTES -lt 0 ]; then
            echo "üìâ Bundle size decreased by $(echo $DIFF_MB | tr -d '-') MB ‚úÖ" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ûñ No change in bundle size" >> $GITHUB_STEP_SUMMARY
          fi

  # üè∑Ô∏è VALIDA√á√ÉO DE COMMITS CONVENCIONAIS
  commit-validation:
    name: üè∑Ô∏è Commit Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Validate Conventional Commits
        run: |
          echo "üè∑Ô∏è Validating commit messages in PR..."

          echo "## üè∑Ô∏è Commit Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Obter commits do PR
          COMMITS=$(git rev-list --no-merges origin/${{ github.base_ref }}..HEAD)
          TOTAL_COMMITS=$(echo "$COMMITS" | wc -l)
          VALID_COMMITS=0
          INVALID_COMMITS=0

          echo "**Total commits no PR:** $TOTAL_COMMITS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for commit in $COMMITS; do
            COMMIT_MSG=$(git log --format=%s -n 1 $commit)
            COMMIT_SHORT=$(echo $commit | cut -c1-7)

            # Usar npx ao inv√©s de instala√ß√£o global
            if echo "$COMMIT_MSG" | npx --yes @commitlint/cli@latest --config /dev/null --extends @commitlint/config-conventional >/dev/null 2>&1; then
              echo "‚úÖ \`$COMMIT_SHORT\`: $COMMIT_MSG" >> $GITHUB_STEP_SUMMARY
              VALID_COMMITS=$((VALID_COMMITS + 1))
            else
              echo "‚ùå \`$COMMIT_SHORT\`: $COMMIT_MSG" >> $GITHUB_STEP_SUMMARY
              INVALID_COMMITS=$((INVALID_COMMITS + 1))
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resultado:** $VALID_COMMITS v√°lidos, $INVALID_COMMITS inv√°lidos" >> $GITHUB_STEP_SUMMARY

          if [ $INVALID_COMMITS -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Como corrigir:**" >> $GITHUB_STEP_SUMMARY
            echo "- Use \`pnpm commit\` para commits guiados" >> $GITHUB_STEP_SUMMARY
            echo "- Formato: \`tipo(escopo): descri√ß√£o\`" >> $GITHUB_STEP_SUMMARY
            echo "- Tipos v√°lidos: feat, fix, docs, style, refactor, test, chore" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Alguns commits n√£o seguem o padr√£o Conventional Commits"
          else
            echo "‚úÖ Todos os commits seguem o padr√£o Conventional Commits!" >> $GITHUB_STEP_SUMMARY
          fi

  # üê≥ BUILD E PUSH VERSIONADO
  build-and-push:
    name: üê≥ Build & Push Versioned Image
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push'

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üè∑Ô∏è Generate Version Tags
        id: meta
        run: |
          # Gera timestamp para versionamento
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')

          # Tags baseadas na branch
          BASE_TAG="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"

          if [[ "${{ github.ref_name }}" == "master" ]]; then
            # Production: v1.0.0, v1.0.0-abc1234, latest
            VERSION="v1.0.${GITHUB_RUN_NUMBER}"
            TAGS="${BASE_TAG}:${VERSION}"
            TAGS="${TAGS},${BASE_TAG}:${VERSION}-${SHORT_SHA}"
            TAGS="${TAGS},${BASE_TAG}:latest"
            TAGS="${TAGS},${BASE_TAG}:stable"
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            # Staging: staging-v1.0.0, staging-timestamp
            VERSION="staging-v1.0.${GITHUB_RUN_NUMBER}"
            TAGS="${BASE_TAG}:${VERSION}"
            TAGS="${TAGS},${BASE_TAG}:staging-${TIMESTAMP}"
            TAGS="${TAGS},${BASE_TAG}:staging"
          else
            # Development: develop-timestamp, develop-sha
            TAGS="${BASE_TAG}:develop-${TIMESTAMP}"
            TAGS="${TAGS},${BASE_TAG}:develop-${SHORT_SHA}"
            TAGS="${TAGS},${BASE_TAG}:develop"
          fi

          echo "üè∑Ô∏è Tags geradas: ${TAGS}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION:-develop-${TIMESTAMP}}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: üê≥ Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_TIME=${{ steps.meta.outputs.timestamp }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_NUMBER=${{ github.run_number }}
            APP_ENV=${{ github.ref_name == 'master' && 'production' || (github.ref_name == 'staging' && 'staging' || 'development') }}
          labels: |
            org.opencontainers.image.title=CAC Frontend
            org.opencontainers.image.description=Interface React/TypeScript para o sistema CAC
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ steps.meta.outputs.timestamp }}

      - name: üìã Summary
        run: |
          echo "## üéâ Build Conclu√≠do com Sucesso!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Imagem Gerada:" >> $GITHUB_STEP_SUMMARY
          echo "- **Vers√£o Docker:** \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè∑Ô∏è Vers√£o Embarcada no App:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build #:** \`${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente:** \`${{ github.ref_name == 'master' && 'production' || (github.ref_name == 'staging' && 'staging' || 'development') }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** \`${{ steps.meta.outputs.timestamp }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üê≥ Como usar:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Tecnologias:" >> $GITHUB_STEP_SUMMARY
          echo "- **React 19** + TypeScript 5.8" >> $GITHUB_STEP_SUMMARY
          echo "- **Vite 7** + TailwindCSS 4" >> $GITHUB_STEP_SUMMARY
          echo "- **shadcn/ui** + Radix UI" >> $GITHUB_STEP_SUMMARY
          echo "- **pnpm** + Vitest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Reposit√≥rio](${{ github.repositoryUrl }})" >> $GITHUB_STEP_SUMMARY

  # üîç AN√ÅLISE DE SEGURAN√áA E QUALIDADE
  security-analysis:
    name: üîç Security & Quality Analysis
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: üîß Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: üì¶ Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Enhanced Security Audit
        run: |
          echo "üîç Verificando vulnerabilidades nas depend√™ncias..."

          # Executar audit e capturar resultados
          echo "## üõ°Ô∏è Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if pnpm audit --audit-level=high --json > audit-results.json 2>/dev/null; then
            echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Vulnerabilidades encontradas:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Contar vulnerabilidades por severidade
            if [ -f audit-results.json ]; then
              HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json 2>/dev/null || echo "0")
              MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json 2>/dev/null || echo "0")
              LOW=$(jq -r '.metadata.vulnerabilities.low // 0' audit-results.json 2>/dev/null || echo "0")

              echo "| Severidade | Quantidade |" >> $GITHUB_STEP_SUMMARY
              echo "|------------|------------|" >> $GITHUB_STEP_SUMMARY
              echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
              echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
              echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              if [ "$HIGH" -gt 0 ]; then
                echo "::warning::Vulnerabilidades cr√≠ticas encontradas: $HIGH"
              fi
            fi

            echo "üí° Execute \`pnpm audit fix\` para corrigir automaticamente ou \`pnpm audit\` para detalhes" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üîí Dependency Review (PRs)
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
